version: '3.5'

networks:
  example-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 11.10.228.0/24
        
volumes:
  admin-data:

services:
 # postgres:
 #   image: postgres:15.0
 #   environment:
 #     POSTGRES_DB: dyadmagazsite_db
 #     POSTGRES_USER: postgres
 #     POSTGRES_PASSWORD: inal_2411
 #   ports:
    # Use PGAdmin to access Postgres or via PGAdmin container to access psql.
 #     - "5432"
 #   volumes:
 #     - db-data:/var/lib/postgresql/data
 #   restart: always
 #   healthcheck:
 #     test: [ "CMD-SHELL", "pg_isready" ]
 #     interval: 15s
 #     timeout: 10s
 #     retries: 10
 #   networks:
 #     example-network:
 #       ipv4_address: 11.10.228.10
    
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: 'admin@example.com'
      PGADMIN_DEFAULT_PASSWORD: 'test_admin'
    ports:
      - "8075:80"
    volumes:
      - admin-data:/var/lib/pgadmin
    networks:
      example-network:
        ipv4_address: 11.10.228.2
    
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'  
    depends_on:
      - frontend
      - backend
    networks:
      example-network:
        ipv4_address: 11.10.228.3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
    - "3000:3000"
    networks:
      example-network:
        ipv4_address: 11.10.228.4

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Сюда твои переменные окружения, чтобы они в докер образе не палились. Они перезапишут .env файл и будут ипользоваться приложухой.
      URL_DATABASE: postgresql+asyncpg://zako4ik:xuyslona228@31.128.46.35:5432/dyadmagazsite_db
      BOT_TOKEN: 7545580314:AAFDycADGlWkCWburPEVByp0uzZgJeTPbZ4
  #  depends_on:
  #    postgres:
  #      condition: service_started
    ports:
    # Я тут порт открыл, чтобы можно было и так зайти без прокси, на всякий пожарный
      - "8000"
    networks:
      example-network:
        ipv4_address: 11.10.228.5
        
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - "9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      example-network:
        ipv4_address: 11.10.228.6

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "3070:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana/config.monitoring
    networks:
      example-network:
        ipv4_address: 11.10.228.7
        
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      example-network:
        ipv4_address: 11.10.228.8
